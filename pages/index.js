import Head from "next/head";
import { useEffect, useState } from "react";

import styled from "styled-components";
import Modal from "../components/Modal";

export default function Home() {
	const [starships, setStarships] = useState([]);
	const [activeShip, setActiveShip] = useState(null);
	const [loading, setLoading] = useState(true);
	const [openModal, setOpenModal] = useState(false);
	const [highestFilmCount, setHighestFilmCount] = useState(0);
	useEffect(() => {
		getStarships();
	}, []);

	// light speed animation
	useEffect(() => {
		function calcCenter() {
			let center = document.createElement("div");
			center.setAttribute("class", "center");
			center.style.top = halfInnerHeight + "px";
			center.style.left = halfInnerWidth + "px";
			document.body.appendChild(center);
		}

		function calcAngle(p1, p2) {
			var angle = Math.atan2(p2.y - p1.y, p2.x - p1.x);
			return radToDegree(angle);
		}

		function radToDegree(rad) {
			return ((rad > 0 ? rad : 2 * Math.PI + rad) * 360) / (2 * Math.PI);
		}

		// Calculate window size
		let screenInnerWidth, screenInnerHeight, halfInnerWidth, halfInnerHeight;
		screenInnerHeight = window.innerHeight;
		screenInnerWidth = window.innerWidth;
		halfInnerWidth = screenInnerWidth / 2;
		halfInnerHeight = screenInnerHeight / 2;
		const centerBounds = 40;

		// Place central point
		calcCenter();

		// Create stars
		for (let i = 0; i < 1000; i++) {
			let div = document.createElement("div");
			let top = Math.floor(Math.random() * screenInnerHeight);
			let left = Math.floor(Math.random() * screenInnerWidth);
			let angle = calcAngle({ x: left, y: top }, { x: halfInnerWidth, y: halfInnerHeight });
			div.setAttribute("class", "star");
			div.style.top = top + "px";
			div.style.left = left + "px";
			div.style.transform = "rotate(" + (angle + 180) + "deg)";
			if (
				// No star streaks on central path
				top >= halfInnerHeight - centerBounds &&
				top <= halfInnerHeight + centerBounds &&
				left >= halfInnerWidth - centerBounds &&
				left <= halfInnerWidth + centerBounds
			) {
				div.style.maxWidth = "1px";
			}
			setTimeout(() => {
				if (document.getElementById("starsContainer")) {
					document.getElementById("starsContainer").appendChild(div);
				}
			}, 11000);
			setTimeout(() => {
				setLoading(false);
			}, 14000);
		}
	}, [loading]);

	const getStarships = async () => {
		const res = await Promise.all([
			fetch("https://swapi.dev/api/starships"),
			fetch("https://swapi.dev/api/starships/?page=2"),
			fetch("https://swapi.dev/api/starships/?page=3"),
			fetch("https://swapi.dev/api/starships/?page=4"),
		]);

		let successResponses = [];
		let errorResponses = [];

		res.map((r) => {
			if (r.ok) {
				successResponses.push(r);
			} else {
				errorResponses.push(r);
			}
		});

		if (errorResponses.length > 0) {
			console.log("errorResponses", errorResponses);
			getMoreStarships(successResponses);
		} else {
			console.log("successResponses", successResponses);
			const data = await Promise.all(res.map((r) => r.json()));
			formatStarshipResponse(data);
		}
	};

	const getMoreStarships = async (successResponses) => {
		const arrayOfResponses = await Promise.all(
			successResponses.map((url) =>
				fetch(url.url).then((res) => res.json())
			)
		);
		formatStarshipResponse(arrayOfResponses);
	};

	const formatStarshipResponse = (data) => {
		const responseResultsArr = data.map((r) => {
			return r.results;
		});
		const mergedResponseArrs = responseResultsArr.flat(1);

		const formattedStarships = mergedResponseArrs.filter(
			(starship) => starship.crew <= 10
		);
		formattedStarships.sort(
			(a, b) => parseFloat(a.crew) - parseFloat(b.crew)
		);
		setStarships(formattedStarships);
		setHighestFilmCount(
			Math.max.apply(
				Math,
				formattedStarships.map((o) => o.films.length)
			)
		);
		console.log("done");
	};

	const handleClick = (ship) => {
		setOpenModal(true);
		setActiveShip(ship);
	};

	return loading ? (
		<LoadingPageStyles>
			<div className="body">
				<div className="wrapper">
					<div className="scrollText">
						<h1>Welcome to Star Wars Ships!</h1>
						<p>
							Hello my name is Imran and welcome to my loading
							screen. I hope you enjoy the application and may the
							force be with you! Please wait for the stars to
							show...
						</p>
					</div>
				</div>
			</div>
			<div id="starsContainer"></div>
		</LoadingPageStyles>
	) : (
		<ContainerStyles>
			<Head>
				<title>Star Wars Ships</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main>
				{activeShip && (
					<Modal
						openModal={openModal}
						setOpenModal={setOpenModal}
						content={activeShip}
						highestFilmCount={highestFilmCount}
					/>
				)}
				<div className="intro">
					<h1>Welcome to Star Wars Ships!</h1>
				</div>
				{starships.length === 0 ? (
					<div className="loading">
						<h2>Something went wrong, please try again shortly.</h2>
					</div>
				) : (
					<div className="shipContainer">
						{starships.map((starship) => (
							<div
								key={starship.name}
								className="ship"
								data-aos="fade-up"
							>
								{starship.films.length === highestFilmCount && (
									<img
										src="../img/star.png"
										alt="star"
										className="star"
									/>
								)}
								<h2>{starship.name}</h2>
								<p>Model: {starship.model}</p>
								<p>Films: {starship.films.length}</p>
								<button
									className="shipBtn"
									onClick={() => {
										handleClick(starship);
									}}
								>
									View More details
								</button>
							</div>
						))}
						
					</div>
				)}
			</main>
		</ContainerStyles>
	);
}

const ContainerStyles = styled.div`
	display: flex;
	width: 100%;
	justify-content: center;
	text-align: center;
	background-image: url("../img/stars.jpg");
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;
	padding: 4rem;
	main {
		display: flex;
		flex-direction: column;
		width: 100%;
		color: #000;
		.intro {
			color: #ffc909;
		}
		.loading {
			color: #ffc909;
			display: flex;
			justify-content: center;
		}
		.shipContainer {
			display: grid;
			grid-template-columns: repeat(4, 1fr);
			gap: 1rem;
			.ship {
				padding: 2rem;
				border-radius: 10px;
				border: 1px solid white;
				color: white;
				border-radius: 10px;
				position: relative;
				&:hover {
					transform: scale(1.1);
					cursor: pointer;
					background: #fff;
					color: black;
					.shipBtn {
						cursor: pointer;
						background: #000;
						color: #fff;
						&:hover {
							background: #fff;
							border: 1px solid #ffc909;
							color: #000;
						}
					}
				}
				.star {
					position: absolute;
					top: 10px;
					right: 10px;
					width: 50px;
				}
			}
			.shipBtn {
				background: #ffc909;
				padding: 1rem;
				color: #000;
			}
		}
	}
	@media (max-width: 1200px) {
		main {
			.shipContainer {
				grid-template-columns: repeat(2, 1fr);
			}
		}
	}
	@media (max-width: 768px) {
		main {
			.shipContainer {
				grid-template-columns: 1fr;
			}
		}
	}
`;

const LoadingPageStyles = styled.div`
	background: black;
	max-width: 1440px;
	max-height: 764px;
	margin: 0 auto;
	.body {
		overflow: hidden;
		padding: 80% 0 0 0;
		position: relative;
		width: 100%;
		max-height: 764px;
		margin: 0 auto;
		height: 100vh;
		&::after {
			content: "";
			position: fixed;
			top: 0rem;
			width: 100%;
			height: 55%;
			background: linear-gradient(
				180deg,
				#000 40%,
				rgba(20, 20, 20, 0) 100%
			);
		}
	}
	.wrapper {
		display: flex;
		height: 100%;
		width: 60%;
		margin: 0 auto;
		perspective: 450px;
		.scrollText {
			color: #ffc909;
			font-size: 3vw;
			text-align: justify;
			position: relative;
			h1 {
				text-align: center;
			}
			animation: scroll 70s linear forwards;
		}
	}

	@media (max-width: 768px) {
		.wrapper {
			width: 90%;
			.scrollText {
				text-align: center;
				font-size: 10vw;
			}
		}
	}
	@media (min-width: 1440px) {
		.body {
			padding: 70vh 0 0 0;
		}
	}
	@media (max-width: 1439px) {
		.body {
			padding: 80% 0 0 0;
		}
	}

	@keyframes scroll {
		from {
			top: 0;
			transform: translateZ(0) rotateX(20deg);
		}
		to {
			top: -7000px;
			transform: translateZ(-2500px) rotateX(21deg);
		}
	}

	@keyframes lightspeed {
		100% {
			width: 100vh;
		}
	}

	.center {
		height: 1px;
		width: 1px;
		position: absolute;
	}

	body {
		background-color: #111;
		min-height: 100vh;
		position: relative;
		overflow: hidden;
	}

	.star {
		border: 1px solid transparent;
		border-radius: 50%;
		border-top-color: #fff;
		margin: 0;
		position: absolute;
		transform-origin: left;
		width: 1px;

		&:nth-child(2n) {
			animation-name: lightspeed;
			animation-duration: 4s;
			animation-delay: 2s;
			animation-iteration-count: infinite;
		}
	}
`;
